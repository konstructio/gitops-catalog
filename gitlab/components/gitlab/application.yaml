---
# Note for the installation:
#
#   This application has a prerequesite in order to work. Create a pull request to add a new OIDC client for GitLab to use,
#   so the OIDC secrets are are available in Vault. In your `gitops` repo, add the following block to the file
#   `/terraform/vault/oidc-clients.tf`.
#
#   Please uncomment the block content when copying it into terraform!
#
###################################################################################################
# module "gitlab" {
#   source = "./modules/oidc-client"
#
#   depends_on = [
#     vault_identity_oidc_provider.kubefirst
#   ]
#
#   app_name               = "gitlab"
#   identity_group_ids     = [vault_identity_group.admins.id, vault_identity_group.developers.id]
#   oidc_provider_key_name = vault_identity_oidc_key.key.name
#   redirect_uris = [
#     "https://gitlab.<YOUR_DOMAIN>/users/auth/openid_connect/callback",
#   ]
#   secret_mount_path = "secret"
# }
###################################################################################################

apiVersion: v1
kind: Namespace
metadata:
  name: gitlab
  labels:
    name: gitlab
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: <CLUSTER_NAME>-gitlab-vault-oidc-template
  namespace: gitlab
  annotations:
    argocd.argoproj.io/sync-wave: "10"
data:
  provider: |
    name: openid_connect
    label: Vault
    icon: https://www.pngitem.com/pimgs/m/329-3299659_hashicorp-vault-logo-hd-png-download.png
    args:
      name: openid_connect
      scope:
        - openid
        - profile
        - email
        - groups
      response_type: code
      issuer: https://vault.<DOMAIN_NAME>/v1/identity/oidc/provider/kubefirst
      client_auth_method: basic
      discovery: true
      uid_field: email
      client_options:
        identifier: "{{ .client_id }}"
        secret: "{{ .client_secret }}"
        redirect_uri: https://gitlab.<DOMAIN_NAME>/users/auth/openid_connect/callback
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: <CLUSTER_NAME>-gitlab-vault-oidc-template
  namespace: gitlab
  annotations:
    argocd.argoproj.io/sync-wave: "20"
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault-kv-secret
  target:
    name: gitlab-vault-oidc
    template:
      engineVersion: v2
      templateFrom:
        - configMap:
            # name of the configmap to pull in
            name: <CLUSTER_NAME>-gitlab-vault-oidc-template
            # here you define the keys that should be used as template
            items:
              - key: provider
  data:
    - secretKey: client_id
      remoteRef:
        key: /oidc/gitlab
        property: client_id
    - secretKey: client_secret
      remoteRef:
        key: /oidc/gitlab
        property: client_secret
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: gitlab
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: '30'
    kubefirst.konstruct.io/application-name: gitlab
    kubefirst.konstruct.io/source: catalog-templates
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    name: <CLUSTER_DESTINATION>
    namespace: gitlab
  project: <PROJECT>
  source:
    repoURL: 'https://charts.gitlab.io'
    targetRevision: 7.7.3
    chart: gitlab
    helm:
      values: |-
        global:
          registry:
            enabled: false
          appConfig:
            omniauth:
              enabled: true
              # autoSignInWithProvider: openid_connect
              syncProfileFromProvider: true
              syncProfileAttributes: [openid, email, profile]
              allowSingleSignOn: [openid_connect]
              autoLinkUser: true
              providers:
              - secret: gitlab-vault-oidc
            defaultProjectsFeatures:
              containerRegistry: false
          hosts:
            domain: <DOMAIN_NAME>
          ingress:
            configureCertmanager: false
            provider: nginx
            class: nginx
            annotations:
              kubernetes.io/tls-acme: true
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
            tls:
              enabled: true
              secretName: gitlab-tls
        gitlab:
          sidekiq:
            enabled: false
            registry:
              enabled: false
          unicorn:
            registry:
              enabled: false
          # https://docs.gitlab.com/charts/installation/command-line-options.html#tls-configuration
          webservice:
            registry:
              enabled: false
            ingress:
              provider: nginx
              class: nginx
              annotations:
                kubernetes.io/tls-acme: true
                cert-manager.io/cluster-issuer: "letsencrypt-prod"
              tls:
                enabled: true
                secretName: gitlab-webservice-tls
        webservice:
          registry:
            enabled: false
        certmanager-issuer:
          email: alerts@kubefirst.io
        upgradeCheck:
          enabled: false
        certmanager:
          installCRDs: false
          install: false
        nginx-ingress:
          enabled: false
        registry:
          enabled: false
        # add on later
        gitlab-runner:
          install: false
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
